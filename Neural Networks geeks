{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-08T10:48:19.474236Z","iopub.execute_input":"2025-08-08T10:48:19.474496Z","iopub.status.idle":"2025-08-08T10:48:22.407212Z","shell.execute_reply.started":"2025-08-08T10:48:19.474476Z","shell.execute_reply":"2025-08-08T10:48:22.406480Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"from tensorflow.keras.datasets import mnist","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T10:48:22.408142Z","iopub.execute_input":"2025-08-08T10:48:22.408918Z","iopub.status.idle":"2025-08-08T10:48:41.128383Z","shell.execute_reply.started":"2025-08-08T10:48:22.408894Z","shell.execute_reply":"2025-08-08T10:48:41.127449Z"}},"outputs":[{"name":"stderr","text":"2025-08-08 10:48:24.942117: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1754650105.275200      36 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1754650105.369320      36 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"(x_train, y_train),(x_test, y_test) = mnist.load_data()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T10:48:41.130448Z","iopub.execute_input":"2025-08-08T10:48:41.130945Z","iopub.status.idle":"2025-08-08T10:48:41.628109Z","shell.execute_reply.started":"2025-08-08T10:48:41.130926Z","shell.execute_reply":"2025-08-08T10:48:41.627318Z"}},"outputs":[{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n\u001b[1m11490434/11490434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"x_train= x_train/255\nx_test = x_test/255","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T10:48:41.629267Z","iopub.execute_input":"2025-08-08T10:48:41.629593Z","iopub.status.idle":"2025-08-08T10:48:41.850125Z","shell.execute_reply.started":"2025-08-08T10:48:41.629567Z","shell.execute_reply":"2025-08-08T10:48:41.849296Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"y_train = to_categorical(y_train, num_classes = 10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T11:11:15.344358Z","iopub.execute_input":"2025-08-08T11:11:15.344932Z","iopub.status.idle":"2025-08-08T11:11:15.350085Z","shell.execute_reply.started":"2025-08-08T11:11:15.344907Z","shell.execute_reply":"2025-08-08T11:11:15.349211Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"y_train[0]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T11:11:57.648917Z","iopub.execute_input":"2025-08-08T11:11:57.649281Z","iopub.status.idle":"2025-08-08T11:11:57.655087Z","shell.execute_reply.started":"2025-08-08T11:11:57.649223Z","shell.execute_reply":"2025-08-08T11:11:57.654458Z"}},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"array([0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])"},"metadata":{}}],"execution_count":14},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nplt.imshow(x_train[5])\nplt.title(f\"image label = {y_train[5]}\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T10:48:41.850936Z","iopub.execute_input":"2025-08-08T10:48:41.851269Z","iopub.status.idle":"2025-08-08T10:48:42.144292Z","shell.execute_reply.started":"2025-08-08T10:48:41.851215Z","shell.execute_reply":"2025-08-08T10:48:42.143458Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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\n"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"import numpy as np\nnp.unique(y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T10:48:42.145077Z","iopub.execute_input":"2025-08-08T10:48:42.145303Z","iopub.status.idle":"2025-08-08T10:48:42.152232Z","shell.execute_reply.started":"2025-08-08T10:48:42.145286Z","shell.execute_reply":"2025-08-08T10:48:42.151557Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=uint8)"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"from tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.utils import to_categorical","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T10:48:42.153123Z","iopub.execute_input":"2025-08-08T10:48:42.153490Z","iopub.status.idle":"2025-08-08T10:48:42.173159Z","shell.execute_reply.started":"2025-08-08T10:48:42.153471Z","shell.execute_reply":"2025-08-08T10:48:42.172366Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"y_train = to_categorical(y_train, num_classes = 10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T11:15:37.346530Z","iopub.execute_input":"2025-08-08T11:15:37.346859Z","iopub.status.idle":"2025-08-08T11:15:37.397112Z","shell.execute_reply.started":"2025-08-08T11:15:37.346826Z","shell.execute_reply":"2025-08-08T11:15:37.396225Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"y_test = to_categorical(y_train, num_classes = 10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T11:15:38.064850Z","iopub.execute_input":"2025-08-08T11:15:38.065158Z","iopub.status.idle":"2025-08-08T11:15:38.500301Z","shell.execute_reply.started":"2025-08-08T11:15:38.065135Z","shell.execute_reply":"2025-08-08T11:15:38.499623Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"model = Sequential([\n    Flatten(input_shape = (28,28)),\n    Dense(5, activation = 'relu'),\n    Dense(10, activation = 'softmax')\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T10:48:42.173999Z","iopub.execute_input":"2025-08-08T10:48:42.174323Z","iopub.status.idle":"2025-08-08T10:48:42.257565Z","shell.execute_reply.started":"2025-08-08T10:48:42.174291Z","shell.execute_reply":"2025-08-08T10:48:42.256533Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/keras/src/layers/reshaping/flatten.py:37: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n2025-08-08 10:48:42.189550: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"import tensorflow as tf\nprint(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T10:48:42.259748Z","iopub.execute_input":"2025-08-08T10:48:42.260455Z","iopub.status.idle":"2025-08-08T10:48:42.264821Z","shell.execute_reply.started":"2025-08-08T10:48:42.260424Z","shell.execute_reply":"2025-08-08T10:48:42.264112Z"}},"outputs":[{"name":"stdout","text":"Num GPUs Available:  0\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"model.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T10:50:13.608978Z","iopub.execute_input":"2025-08-08T10:50:13.609321Z","iopub.status.idle":"2025-08-08T10:50:13.625456Z","shell.execute_reply.started":"2025-08-08T10:50:13.609295Z","shell.execute_reply":"2025-08-08T10:50:13.624416Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m784\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m)              │         \u001b[38;5;34m3,925\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │            \u001b[38;5;34m60\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">784</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>)              │         <span style=\"color: #00af00; text-decoration-color: #00af00\">3,925</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │            <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m3,985\u001b[0m (15.57 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">3,985</span> (15.57 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m3,985\u001b[0m (15.57 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">3,985</span> (15.57 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T11:02:29.257202Z","iopub.execute_input":"2025-08-08T11:02:29.257572Z","iopub.status.idle":"2025-08-08T11:02:29.272165Z","shell.execute_reply.started":"2025-08-08T11:02:29.257547Z","shell.execute_reply":"2025-08-08T11:02:29.271381Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"model.fit(x_train, y_train, epochs=10, batch_size=32, verbose=2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T11:13:40.728381Z","iopub.execute_input":"2025-08-08T11:13:40.729178Z","iopub.status.idle":"2025-08-08T11:14:10.954069Z","shell.execute_reply.started":"2025-08-08T11:13:40.729149Z","shell.execute_reply":"2025-08-08T11:14:10.953443Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/10\n1875/1875 - 4s - 2ms/step - accuracy: 0.7539 - loss: 0.7959\nEpoch 2/10\n1875/1875 - 3s - 2ms/step - accuracy: 0.8778 - loss: 0.4346\nEpoch 3/10\n1875/1875 - 3s - 2ms/step - accuracy: 0.8870 - loss: 0.3992\nEpoch 4/10\n1875/1875 - 3s - 1ms/step - accuracy: 0.8911 - loss: 0.3826\nEpoch 5/10\n1875/1875 - 3s - 1ms/step - accuracy: 0.8943 - loss: 0.3734\nEpoch 6/10\n1875/1875 - 3s - 1ms/step - accuracy: 0.8958 - loss: 0.3666\nEpoch 7/10\n1875/1875 - 3s - 2ms/step - accuracy: 0.8970 - loss: 0.3616\nEpoch 8/10\n1875/1875 - 3s - 1ms/step - accuracy: 0.8983 - loss: 0.3577\nEpoch 9/10\n1875/1875 - 3s - 2ms/step - accuracy: 0.9001 - loss: 0.3534\nEpoch 10/10\n1875/1875 - 3s - 1ms/step - accuracy: 0.9010 - loss: 0.3515\n","output_type":"stream"},{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"<keras.src.callbacks.history.History at 0x7f5187fbb790>"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"print(x_test.shape)   # Should be (10000, 28, 28) for MNIST\nprint(y_test.shape) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T11:16:54.072644Z","iopub.execute_input":"2025-08-08T11:16:54.073022Z","iopub.status.idle":"2025-08-08T11:16:54.077742Z","shell.execute_reply.started":"2025-08-08T11:16:54.072998Z","shell.execute_reply":"2025-08-08T11:16:54.076886Z"}},"outputs":[{"name":"stdout","text":"(10000, 28, 28)\n(60000, 10, 10, 10)\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"from tensorflow.keras.utils import to_categorical\n\n# ONLY DO THIS ONCE — AND ON RAW INTEGER LABELS\ny_train = to_categorical(y_train, num_classes=10)\ny_test = to_categorical(y_test, num_classes=10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T11:18:21.089637Z","iopub.execute_input":"2025-08-08T11:18:21.090186Z","iopub.status.idle":"2025-08-08T11:18:26.293934Z","shell.execute_reply.started":"2025-08-08T11:18:21.090161Z","shell.execute_reply":"2025-08-08T11:18:26.293258Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"from tensorflow.keras.datasets import mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Now apply correct preprocessing\ny_train = to_categorical(y_train, num_classes=10)\ny_test = to_categorical(y_test, num_classes=10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T11:18:52.369923Z","iopub.execute_input":"2025-08-08T11:18:52.370759Z","iopub.status.idle":"2025-08-08T11:18:52.734117Z","shell.execute_reply.started":"2025-08-08T11:18:52.370732Z","shell.execute_reply":"2025-08-08T11:18:52.733386Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"model.evaluate(x_test, y_test)  # Both should have the same number of samples","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T11:18:56.161359Z","iopub.execute_input":"2025-08-08T11:18:56.161663Z","iopub.status.idle":"2025-08-08T11:18:56.990984Z","shell.execute_reply.started":"2025-08-08T11:18:56.161641Z","shell.execute_reply":"2025-08-08T11:18:56.990094Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8150 - loss: 92.2245\n","output_type":"stream"},{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"[82.20805358886719, 0.8406999707221985]"},"metadata":{}}],"execution_count":26},{"cell_type":"code","source":"model.save('mnist.h5')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T11:20:34.307823Z","iopub.execute_input":"2025-08-08T11:20:34.308743Z","iopub.status.idle":"2025-08-08T11:20:34.352687Z","shell.execute_reply.started":"2025-08-08T11:20:34.308710Z","shell.execute_reply":"2025-08-08T11:20:34.352070Z"}},"outputs":[],"execution_count":27},{"cell_type":"markdown","source":"**Improvement**","metadata":{}},{"cell_type":"code","source":"model = Sequential([\n    Flatten(input_shape=(28, 28)),\n    Dense(128, activation='relu'),\n    Dense(10, activation='softmax')\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T11:21:16.067215Z","iopub.execute_input":"2025-08-08T11:21:16.067636Z","iopub.status.idle":"2025-08-08T11:21:16.097085Z","shell.execute_reply.started":"2025-08-08T11:21:16.067609Z","shell.execute_reply":"2025-08-08T11:21:16.096215Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=10, batch_size=32, verbose=2)\nmodel.evaluate(x_test, y_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T11:21:24.186676Z","iopub.execute_input":"2025-08-08T11:21:24.187514Z","iopub.status.idle":"2025-08-08T11:22:10.875126Z","shell.execute_reply.started":"2025-08-08T11:21:24.187488Z","shell.execute_reply":"2025-08-08T11:22:10.874138Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/10\n1875/1875 - 5s - 3ms/step - accuracy: 0.8543 - loss: 2.2133\nEpoch 2/10\n1875/1875 - 4s - 2ms/step - accuracy: 0.9107 - loss: 0.3753\nEpoch 3/10\n1875/1875 - 4s - 2ms/step - accuracy: 0.9281 - loss: 0.2849\nEpoch 4/10\n1875/1875 - 5s - 3ms/step - accuracy: 0.9372 - loss: 0.2519\nEpoch 5/10\n1875/1875 - 4s - 2ms/step - accuracy: 0.9427 - loss: 0.2270\nEpoch 6/10\n1875/1875 - 4s - 2ms/step - accuracy: 0.9482 - loss: 0.2070\nEpoch 7/10\n1875/1875 - 4s - 2ms/step - accuracy: 0.9488 - loss: 0.2102\nEpoch 8/10\n1875/1875 - 4s - 2ms/step - accuracy: 0.9537 - loss: 0.1846\nEpoch 9/10\n1875/1875 - 4s - 2ms/step - accuracy: 0.9542 - loss: 0.1849\nEpoch 10/10\n1875/1875 - 4s - 2ms/step - accuracy: 0.9572 - loss: 0.1771\n\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9361 - loss: 0.3420\n","output_type":"stream"},{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"[0.31294721364974976, 0.9398000240325928]"},"metadata":{}}],"execution_count":29},{"cell_type":"code","source":"from tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.utils import to_categorical\nimport numpy as np\n\n# Load data\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Normalize pixel values (0–255 → 0–1)\nx_train = x_train.astype('float32') / 255.0\nx_test = x_test.astype('float32') / 255.0\n\n# Reshape to add channel dimension: (28, 28) → (28, 28, 1)\nx_train = np.expand_dims(x_train, -1)\nx_test = np.expand_dims(x_test, -1)\n\n# One-hot encode labels\ny_train = to_categorical(y_train, num_classes=10)\ny_test = to_categorical(y_test, num_classes=10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T11:22:10.876547Z","iopub.execute_input":"2025-08-08T11:22:10.876798Z","iopub.status.idle":"2025-08-08T11:22:11.333463Z","shell.execute_reply.started":"2025-08-08T11:22:10.876778Z","shell.execute_reply":"2025-08-08T11:22:11.332574Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n\nmodel = Sequential([\n    Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n    MaxPooling2D((2, 2)),\n    Conv2D(64, (3, 3), activation='relu'),\n    MaxPooling2D((2, 2)),\n    Flatten(),\n    Dense(64, activation='relu'),\n    Dense(10, activation='softmax')\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T11:22:13.130326Z","iopub.execute_input":"2025-08-08T11:22:13.130605Z","iopub.status.idle":"2025-08-08T11:22:13.181353Z","shell.execute_reply.started":"2025-08-08T11:22:13.130586Z","shell.execute_reply":"2025-08-08T11:22:13.180392Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"}],"execution_count":31},{"cell_type":"code","source":"model.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=5, batch_size=64, verbose=2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T11:22:25.067321Z","iopub.execute_input":"2025-08-08T11:22:25.068142Z","iopub.status.idle":"2025-08-08T11:24:17.569532Z","shell.execute_reply.started":"2025-08-08T11:22:25.068118Z","shell.execute_reply":"2025-08-08T11:24:17.568722Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/5\n938/938 - 24s - 26ms/step - accuracy: 0.9502 - loss: 0.1630\nEpoch 2/5\n938/938 - 21s - 23ms/step - accuracy: 0.9837 - loss: 0.0523\nEpoch 3/5\n938/938 - 22s - 24ms/step - accuracy: 0.9892 - loss: 0.0357\nEpoch 4/5\n938/938 - 22s - 24ms/step - accuracy: 0.9914 - loss: 0.0280\nEpoch 5/5\n938/938 - 22s - 23ms/step - accuracy: 0.9931 - loss: 0.0218\n","output_type":"stream"},{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"<keras.src.callbacks.history.History at 0x7f51826a2850>"},"metadata":{}}],"execution_count":32},{"cell_type":"code","source":"loss, accuracy = model.evaluate(x_test, y_test, verbose=0)\nprint(f\"Test accuracy: {accuracy:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T11:24:17.570865Z","iopub.execute_input":"2025-08-08T11:24:17.571120Z","iopub.status.idle":"2025-08-08T11:24:19.479102Z","shell.execute_reply.started":"2025-08-08T11:24:17.571100Z","shell.execute_reply":"2025-08-08T11:24:19.478291Z"}},"outputs":[{"name":"stdout","text":"Test accuracy: 0.9905\n","output_type":"stream"}],"execution_count":33},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Pick a sample\ni = 0\nplt.imshow(x_test[i].reshape(28, 28), cmap='gray')\nplt.title(f\"True label: {np.argmax(y_test[i])}\")\nplt.show()\n\n# Predict\npred = model.predict(x_test[i:i+1])\nprint(\"Predicted class:\", np.argmax(pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T11:24:19.480008Z","iopub.execute_input":"2025-08-08T11:24:19.480345Z","iopub.status.idle":"2025-08-08T11:24:19.816235Z","shell.execute_reply.started":"2025-08-08T11:24:19.480315Z","shell.execute_reply":"2025-08-08T11:24:19.815479Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 111ms/step\nPredicted class: 7\n","output_type":"stream"}],"execution_count":34}]}